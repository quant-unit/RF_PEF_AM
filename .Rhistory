x1 <- runif(100)
e1 <- ecdf(x1)
quafu <- function(x){
(e1(x)-x)^2
}
quafu(1)
quafu(0.2)
quafu(0.3)
i1 <- integrate(quafu(x),0,1)
i1 <- integrate(quafu,0,1)
i1
i1$value
log(rnorm(100))
rnorm(100)
rlnorm(100)
rlnorm(100,0,1)
rlnorm(100,0,0.1)
rlnorm(100,0,0.1)-1
rlnorm(1000,0,0.1)-1
r1 <- rlnorm(1000,0,0.1)-1
r2 <- rlnorm(1000,0,0.1)-1
cor(r1,r2)
fx <- rlnorm(1000,0,0.05)-1
fx <- rlnorm(1000,0,0.05)
r1fx <- r1 * fx
r2fx <- r2 * fx
cor(r1fx,r2fx)
r1fx <- r1 + fx
r2fx <- r2 + fx
cor(r1fx,r2fx)
r2fx <- r2 * fx
r2fx <- r2 * fx
r1fx <- r1 * fx
r2fx <- r2 * fx
install.packages("xtable")
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
lm.D9
summary(lm.D9)
require(xtable)
xtable(lm.D9)
options(xtable.floating = FALSE)
options(xtable.timestamp = "")
xtable(lm.D9)
print(xtable(lm.D9))
install.packages("wgeesel")
lnrnorm(10)
rlnorm(10)
rlnorm(10,0,0.1)
return <- rlnorm(100,0,0.1) - 1
rm(return)
return_market <- rlnorm(100,0,0.1) - 1
return_asset <- return_market + rnorm(100,0.02,0.15)
n <- 100
df_return <- data.frame(return_market= rlnorm(n,0,0.1) - 1)
df_return$return_asset <- df_return$return_market + rnorm(n,0.02,0.15)
rm(return_asset,return_market)
View(df_return)
cor(df_return)
cor(df_return[df_return$return_market < 0,])
cor(df_return[df_return$return_market > 0,])
cor(df_return)
cor(df_return[df_return$return_market < 0,])
cor(df_return[df_return$return_market > 0,])
n <- 1000
df_return <- data.frame(return_market= rlnorm(n,0,0.1) - 1)
df_return$return_asset <- df_return$return_market + rnorm(n,0.02,0.25)
cor(df_return)
cor(df_return[df_return$return_market < 0,])
cor(df_return[df_return$return_market > 0,])
cor(df_return[df_return$return_market <= 0,]) # downside correlation
cor(df_return[df_return$return_market < 0,]) # downside correlation
df_return[n:(n+100),] <- c(rnorm(n,-0.2,0.1),rnorm(n,-0.2,0.1))
cor(df_return)
cor(df_return[df_return$return_market < 0,]) # downside correlation
cor(df_return[df_return$return_market >= 0,]) # upside correlation
df_return[n:(n+500),] <- c(rnorm(n,-0.2,0.1),rnorm(n,-0.2,0.1))
cor(df_return)
cor(df_return[df_return$return_market < 0,]) # downside correlation
n <- 1000 ; m <- 500
n <- 1000 ; m <- 500
df_return <- data.frame(return_market= rlnorm(n,0,0.1) - 1)
df_return$return_asset <- df_return$return_market + rnorm(n,0.02,0.25)
df_return[n:(n+m),] <- c(rnorm(m,-0.2,0.1),rnorm(m,-0.2,0.1))
c(rnorm(m,-0.2,0.1),rnorm(m,-0.2,0.1))
df_return[n:(n+m),] <- data.frame(rnorm(m,-0.2,0.1),rnorm(m,-0.2,0.1))
data.frame(rnorm(m,-0.2,0.1),rnorm(m,-0.2,0.1))
df_return[n:(n+m),] <- data.frame(rnorm(m,-0.2,0.1),rnorm(m,-0.2,0.1))
df_return <- rbind(df_return, data.frame(rnorm(m,-0.2,0.1),rnorm(m,-0.2,0.1)))
df_return <- rbind(df_return, data.frame(return_market= rnorm(m,-0.2,0.1),return_asset= rnorm(m,-0.2,0.1)))
n <- 1000 ; m <- 500
df_return <- data.frame(return_market= rlnorm(n,0,0.1) - 1)
df_return$return_asset <- df_return$return_market + rnorm(n,0.02,0.25)
cor(df_return)
cor(df_return[df_return$return_market < 0,]) # downside correlation
cor(df_return[df_return$return_market >= 0,]) # upside correlation
df_return <- rbind(df_return, data.frame(return_market= rnorm(m,-0.2,0.1),return_asset= rnorm(m,-0.2,0.1)))
cor(df_return)
cor(df_return[df_return$return_market < 0,]) # downside correlation
cor(df_return[df_return$return_market >= 0,]) # upside correlation
n <- 1000 ; m <- 500
df_return <- data.frame(return_market= rlnorm(n,0,0.1) - 1)
df_return$return_asset <- df_return$return_market + rnorm(n,0.05,0.15)
df_return <- rbind(df_return, data.frame(return_market= rnorm(m,-0.2,0.05),return_asset= rnorm(m,-0.2,0.05)))
cor(df_return)
cor(df_return[df_return$return_market < 0,]) # downside correlation
cor(df_return[df_return$return_market >= 0,]) # upside correlation
mean(df_return$return_market)
cor(df_return)
cor(df_return[df_return$return_market < threshold,]) # downside correlation
cor(df_return[df_return$return_market >= threshold,]) # upside correlation
threshold <- mean(df_return$return_market)
cor(df_return)
cor(df_return[df_return$return_market < threshold,]) # downside correlation
cor(df_return[df_return$return_market >= threshold,]) # upside correlation
n <- 1000 ; m <- 500
df_return <- data.frame(return_market= rlnorm(n,0,0.1) - 1)
df_return$return_asset <- df_return$return_market + rnorm(n,0.15,0.15)
df_return <- rbind(df_return, data.frame(return_market= rnorm(m,-0.2,0.05),return_asset= rnorm(m,-0.2,0.05)))
threshold <- mean(df_return$return_market)
n <- 1000 ; m <- 500
df_return <- data.frame(return_market= rlnorm(n,0,0.1) - 1)
df_return$return_asset <- df_return$return_market + rnorm(n,0.15,0.15)
df_return <- rbind(df_return, data.frame(return_market= rnorm(m,-0.2,0.05),return_asset= rnorm(m,-0.2,0.05)))
threshold <- mean(df_return$return_market)
df_return <- data.frame(return_market= rlnorm(n,0.2,0.1) - 1)
df_return$return_asset <- df_return$return_market + rnorm(n,0.15,0.15)
df_return <- rbind(df_return, data.frame(return_market= rnorm(m,-0.2,0.05),return_asset= rnorm(m,-0.2,0.05)))
threshold <- mean(df_return$return_market)
cor(df_return)
cor(df_return[df_return$return_market < threshold,]) # downside correlation
cor(df_return[df_return$return_market >= threshold,]) # upside correlation
n <- 1000 ; m <- 500
df_return <- data.frame(return_market= rlnorm(n,0,0.1) - 1)
df_return$return_asset <- df_return$return_market + rnorm(n,0.05,0.15)
cor(df_return)
cor(df_return[df_return$return_market < threshold,]) # downside correlation
cor(df_return[df_return$return_market >= threshold,]) # upside correlation
colMeans(df_return[df_return$return_market < threshold,])
colMeans(df_return)
cor(df_return)
colMeans(df_return[df_return$return_market < threshold,])
(20/120)/(10/100)
install.packages("flexsurv")
flexsurv::qgengamma
flexsurv::qgengamma
rm(list=ls()) # remove workspace objects
root <- file.path(getwd(), "Dropbox", "Project D", "3_R_Pro_D")
root
wd <- list()
wd$code <- file.path(root, "Exit_Dynamics", "Code")
wd$data <- file.path(root, "Exit_Dynamics", "Code", "Data")
wd$eps <-  file.path(root, "Exit_Dynamics", "Code", "EPS_output")
wd$eps2 <-  file.path(root, "Exit_Dynamics", "Code", "EPS_output_small")
wd$csv <-  file.path(root, "Exit_Dynamics", "Code", "CSV_output")
rm(root)
dir.create(wd$eps2)
setwd(wd$code)
source("Useful_Functions.R")
source("ExitDynamics_Packages.R")
setwd(wd$data)
load("ExitDynamics_Data_V1.RData")
create.eps <- FALSE
create.csv <- FALSE
wd
getwd()
root <- file.path("Dropbox", "Project D", "3_R_Pro_D")
wd <- list()
wd$code <- file.path(root, "Exit_Dynamics", "Code")
wd$data <- file.path(root, "Exit_Dynamics", "Code", "Data")
wd$eps <-  file.path(root, "Exit_Dynamics", "Code", "EPS_output")
wd$eps2 <-  file.path(root, "Exit_Dynamics", "Code", "EPS_output_small")
wd$csv <-  file.path(root, "Exit_Dynamics", "Code", "CSV_output")
rm(root)
dir.create(wd$eps2)
getwd()
setwd("C:/Users/christian.tausch")
root <- file.path(getwd(), "Dropbox", "Project D", "3_R_Pro_D")
wd <- list()
wd$code <- file.path(root, "Exit_Dynamics", "Code")
wd$data <- file.path(root, "Exit_Dynamics", "Code", "Data")
wd$eps <-  file.path(root, "Exit_Dynamics", "Code", "EPS_output")
wd$eps2 <-  file.path(root, "Exit_Dynamics", "Code", "EPS_output_small")
wd$csv <-  file.path(root, "Exit_Dynamics", "Code", "CSV_output")
rm(root)
dir.create(wd$eps2)
setwd(wd$code)
source("Useful_Functions.R")
source("ExitDynamics_Packages.R")
setwd(wd$data)
load("ExitDynamics_Data_V1.RData")
create.eps <- FALSE
create.csv <- FALSE
## 00) Reduce Input Data ------
g.p2c2 <- g.p2c2[g.p2c2$Fund_InvestTypes %in% c("BO", "VC"), ]
colnames(g.p2c2)
g.sum <- g.sum[g.sum$Type %in% c("BO", "VC"),
c("Type", "Fund_ID", "InvDate", "ExitDate", "YearInvest", "Vintage", "MOIC")]
table(g.sum$Type)
table(g.p2c2$Fund_InvestTypes)
## 1) Timing   ------
par(par_default)
setwd(wd$code)
source("ExitDynamics_Timing.R")
sun(as.numeric(g.sum$ExitDate - g.sum$InvDate)/365.25)
length(names(table(g.sum$Fund_ID[g.sum$Type == "BO"])))
list(
BO_Funds = length(levels(as.factor(as.character(g.sum$Fund_ID[g.sum$Type == "BO"])))),
VC_Funds = length(levels(as.factor(as.character(g.sum$Fund_ID[g.sum$Type == "VC"])))),
BO_VC_Funds = length(levels(as.factor(as.character(g.sum$Fund_ID[g.sum$Type %in% c("BO", "VC")])))),
Censoring_Companies = table(is.na(g.sum$ExitDate),g.sum$Type) # exit vs right censored events
)
# Non-Parametric Cox Regression (partial likelihood)
np.cox <- timing$NonParaCoxRegression(g.p2c2)
# Parametric Cox Regression
setwd(wd$data)
system.time(
# wb.cox <- timing$ParaCoxRegression(public.data, g.sum)
# saveRDS(wb.cox, "z_Para_Cox_Weibull5.rds")
wb.cox <- readRDS("z_Para_Cox_Weibull5.rds")
)
# create .csv output
setwd(wd$csv)
timing$CreateOutput(wb.cox, create.csv)
# Create Plots
if(FALSE){
if(create.eps){
setwd(wd$eps)
}
timing$PlotCoxWeibullSurvival(eps = create.eps,
para_in = wb.cox,
non_para_in = np.cox)
uni.CDF.timing <- timing$Weibull_Roseblatt(eps= create.eps,
data_LoLi = g.sum,
public.data = public.data,
Para_Cox_Weibull = wb.cox)
sun(uni.CDF.timing$BO, Ylim = c(0,2))
sun(uni.CDF.timing$VC, Ylim = c(0,2))
}
## 2) Multiple -------
par(par_default)
setwd(wd$code)
source("ExitDynamics_Multiple.R")
# Summary Statistics (How many observations, i.e. company IDs)
list(First_Entry_Date = min(G.p2c$Investment_Date),
BO_stochastic = nrow(multiple$creat_reg_df("BO", stochastic = TRUE)),
BO_first = nrow(multiple$creat_reg_df("BO", stochastic = FALSE)),
VC_stochastic = nrow(multiple$creat_reg_df("VC", stochastic = TRUE)),
VC_first = nrow(multiple$creat_reg_df("VC", stochastic = FALSE)) )
# Run Multiple Regressions
if(FALSE){
multi.reg <- list()
for(type in c("BO","VC")){
for(iter in c(1, 500)){
set.seed(99)
multi.reg[[paste(type, iter, sep="_")]] <- multiple$MLE(iter, type)
}
}
setwd(wd$data)
# saveRDS(multi.reg, "multi.reg2.RDS")
} else {
setwd(wd$data)
multi.reg <- readRDS("multi.reg2.RDS")
}
# NB2 Model
sapply(multi.reg$BO_500$NB2, sun)
sapply(multi.reg$VC_500$NB2, sun)
# Create .csv Output
setwd(wd$csv)
multi.reg.sum <- multiple$CreateOutput(multi.reg, create.csv)
# Plot color compound CDF
setwd(wd$eps)
set.seed(97)
multiple$predict_dgh(sim_out = TRUE, plot_it = TRUE, eps = create.eps, size = "big")
setwd(wd$eps2)
set.seed(97)
multiple$predict_dgh(sim_out = TRUE, plot_it = TRUE, eps = create.eps, size = "small")
if(FALSE){
# Plot dependent variables (Multiple)
setwd(wd$eps)
multiple$plot.multi.dist(create.eps)
system.time(
uni.CDF.multiple <- multiple$predict_dgh(sim_out = FALSE, plot_it = FALSE, eps = FALSE)
)
sun(uni.CDF.multiple, Ylim = c(0,2))
multiple$DGH_Roseblatt(G.p2c, uni.CDF.multiple)
plot.ecdf(uni.CDF.multiple)
abline(v = c(0,1), a = 0, b = 1, col = "grey", lty = 2)
points(seq(0,1,0.001), quantile(uni.CDF.multiple, seq(0,1,0.001)), col ="blue", pch = 20, cex = 0.7)
# curve(truncdist::dtrunc(x, spec="gamma" ,a=0.1 ,b=5 ,shape=1.304 , scale= exp(1.405)/1.304), 0,6)
}
## 3) Empirical Plot & Visualize mMPP framework -----
empirical.timing.multiple <- function(size = "big"){
dy.bo <- ecdf(G.p2c$P2C.multi1[G.p2c$Fund_InvestTypes == "BO"])
st.bo <- ecdf(g.sum$MOIC[g.sum$Type == "BO"])
dy.vc <- ecdf(G.p2c$P2C.multi1[G.p2c$Fund_InvestTypes == "VC"])
st.vc <- ecdf(g.sum$MOIC[g.sum$Type == "VC"])
if(create.eps){
old.wd <- getwd()
if(size == "big"){
setwd(wd$eps)
setEPS()
postscript("Empirical-Timing-Multiple.eps", width = 5, height = 4,
family = "Helvetica", pointsize = 2)
} else {
setwd(wd$eps2)
setEPS()
postscript("Empirical-Timing-Multiple_small.eps",
width = 3.25, height = 3.25,
family = "Helvetica", pointsize = 1)
}
}
cex.par <- 1.3
if(size == "small") cex.par <- 1
par(mfrow = c(2, 2), mar = c(4.5, 4.5, 2, 1), cex = cex.par)
plot(np.cox$BO$KaMe, main = "BO", xlab = "Timing", ylab = "Survival Function")
plot(np.cox$VC$KaMe, main = "VC", xlab = "Timing", ylab = "Survival Function")
curve(dy.bo, 0, 10, ylim = c(0, 1), xlab = "Multiple", ylab = "ECDF", main = "BO")
curve(st.bo, 0, 10, add = TRUE, lty = 2)
legend("bottomright", bty = "n", legend = c("dynamic", "static"), lty = c(1,2))
curve(dy.vc, 0, 10, ylim = c(0, 1), xlab = "Multiple", ylab = "ECDF", main = "VC")
curve(st.vc, 0, 10, add = TRUE, lty = 2)
legend("bottomright", bty = "n", legend = c("dynamic", "static"), lty = c(1,2))
if(create.eps){
dev.off()
setwd(old.wd)
}
}
empirical.timing.multiple("big")
empirical.timing.multiple("small")
mMMP_chart <- function(size = "big"){
mpp <- data.frame(Time = c(1.664, 6.404), CashFlow = c(-0.8, 1.3))
mpp3 <- data.frame(Time = c(3.323), CashFlow = c(-0.4))
mpp2 <- data.frame(Time = c(4.38, 8.3434), CashFlow = c(-1.2, 0.954))
smargin <- 0.5
if(create.eps){
old.wd <- getwd()
if(size == "big"){
setwd(wd$eps)
setEPS()
postscript("MPP-Visualization.eps",
width = 4.5, height = 2,
family = "Helvetica", pointsize = 2)
} else {
setwd(wd$eps2)
setEPS()
postscript("MPP-Visualization.eps",
width = 3.25, height = 2,
family = "Helvetica", pointsize = 2)
}
}
par(par_default)
par(mar = c(4.5,4.5,2,1))
plot(mpp, type = "h", xlim = c(0, 10), ylim = c(-2, 2), ylab = "Cash Flow", xlab = "Time (in Quarters)",
cex.lab = 0.8, xaxs = "i", cex.axis = 0.8, at = seq(-10,10,1))
points(mpp, pch = 22, cex = 2, lwd = 1)
text(x = mpp$Time,y = c(smargin, -smargin), c(latex2exp::TeX('$\\c_1'),latex2exp::TeX('$\\d_1')), cex=1)
text(x = mpp$Time,y = mpp$CashFlow - c(smargin, -smargin), c(latex2exp::TeX('$\\C_1'),latex2exp::TeX('$\\D_1')), cex=1)
abline(h = 0, v = 0)
abline(v = seq(20), lty = 2, col= "darkgrey")
lines(mpp2, type = "h")
points(mpp2, pch = 21, cex = 2, lwd = 1)
text(x = mpp2$Time,y = c(smargin, -smargin), c(latex2exp::TeX('$\\c_3'),latex2exp::TeX('$\\d_3')), cex=1)
text(x = mpp2$Time,y = mpp2$CashFlow - c(smargin, -smargin), c(latex2exp::TeX('$\\C_3'),latex2exp::TeX('$\\D_3')), cex=1)
lines(mpp3, type = "h")
points(mpp3, pch = 25, cex = 2, lwd = 1)
text(x = mpp3$Time,y = smargin, c(latex2exp::TeX('$\\c_2')), cex=1)
text(x = mpp3$Time,y = mpp3$CashFlow - c(smargin), c(latex2exp::TeX('$\\C_2')), cex=1)
if(create.eps){
dev.off()
setwd(old.wd)
}
}
mMMP_chart("big")
mMMP_chart("small")
mMMP_chart2 <- function(CEX = 1, meth = "reduced-form", size = "big"){
mpp <- data.frame(Time = c(1.664, 6.404), CashFlow = c(-0.8, 1.3))
mpp3 <- data.frame(Time = c(3.323), CashFlow = c(-0.4))
mpp2 <- data.frame(Time = c(4.38, 8.3434), CashFlow = c(-1.2, 0.954))
smargin <- 0.5
if(create.eps){
old.wd <- getwd()
if(size == "big"){
setwd(wd$eps)
setEPS()
postscript("MPP-Visualization2.eps",
width = 4.5, height = 2,
family = "Helvetica", pointsize = 2)
} else {
setwd(wd$eps2)
setEPS()
postscript("MPP-Visualization2.eps",
width = 3.25, height = 2,
family = "Helvetica", pointsize = 2)
}
}
par(par_default)
par(mar = c(4.5,4.5,2,1), cex = CEX)
plot(mpp, type = "h", xlim = c(0, 10), ylim = c(-2, 2), ylab = "Cash Flow", xlab = "Time (in Quarters)",
cex.lab = 0.8, xaxs = "i", cex.axis = 0.8, at = seq(-10,10,1))
points(mpp, pch = 22, cex = 2, lwd = 1)
text(x = mpp$Time,y = c(smargin, -smargin), c(latex2exp::TeX('$\\c_1'),latex2exp::TeX('$\\d_1')), cex=1)
text(x = mpp$Time,y = mpp$CashFlow - c(smargin, -smargin), c(latex2exp::TeX('$\\C_1'),latex2exp::TeX('$\\D_1')), cex=1)
abline(h = 0, v = 0)
abline(v = seq(20), lty = 2, col= "darkgrey")
if(meth != "reduced-form"){
lines(mpp2, type = "h")
points(mpp2, pch = 21, cex = 2, lwd = 1)
text(x = mpp2$Time,y = c(smargin, -smargin), c(latex2exp::TeX('$\\c_3'),latex2exp::TeX('$\\d_3')), cex=1)
text(x = mpp2$Time,y = mpp2$CashFlow - c(smargin, -smargin), c(latex2exp::TeX('$\\C_3'),latex2exp::TeX('$\\D_3')), cex=1)
lines(mpp3, type = "h")
points(mpp3, pch = 25, cex = 2, lwd = 1)
text(x = mpp3$Time,y = smargin, c(latex2exp::TeX('$\\c_2')), cex=1)
text(x = mpp3$Time,y = mpp3$CashFlow - c(smargin), c(latex2exp::TeX('$\\C_2')), cex=1)
} else {
valueprocess <- data.frame(Time = 4.5, CashFlow = 0.9)
value.col <- "black"
lines(valueprocess, type = "h", col = value.col)
points(valueprocess, pch = 22, cex = 2, lwd = 1, col = value.col)
text(x = valueprocess$Time,y = c(-smargin), c(latex2exp::TeX('$\\t')), cex = 1, col = value.col)
text(x = valueprocess$Time,y = valueprocess$CashFlow + c(smargin), c(latex2exp::TeX('$\\V_1(t)')), cex = 1, col = value.col)
}
if(create.eps){
dev.off()
setwd(old.wd)
}
}
mMMP_chart2(size = "big")
mMMP_chart2(size = "small")
if(FALSE){
setwd(wd$eps)
witdth <- 250
png("MPP1.png", witdth*2.2, witdth, pointsize = 10)
mMMP_chart2(1.3, "other")
dev.off()
png("MPP2.png", witdth*2.2, witdth, pointsize = 10)
mMMP_chart2(1.3)
dev.off()
}
## 4) Simulate ------
par(par_default)
setwd(wd$code)
source("ExitDynamics_Bivariate.R")
set.seed(98)
system.time(x <- simulate$Final.Simulator(50, N = c(3, 15), "VC"))
tail(x$PublicScenario)
x$PF
for(pfs in names(x$Output)){
df.summary <- data.frame(sapply(x$Output[[pfs]], sun))
x$CSV[[pfs]] <- df.summary
if(create.csv){
setwd(wd$csv)
write.csv(df.summary, file = paste("PoFo_",pfs,".csv",sep = ""), na = "", row.names = TRUE, dec = ".")
}
}
x$CSV
names(x)
x$PF
x$Output
x$Output
## 0) Prologue -------
rm(list=ls()) # remove workspace objects
setwd("C:/Users/christian.tausch")
root <- file.path(getwd(), "Dropbox", "Project D", "3_R_Pro_D")
wd <- list()
wd$code <- file.path(root, "Exit_Dynamics", "Code")
wd$data <- file.path(root, "Exit_Dynamics", "Code", "Data")
wd$eps <-  file.path(root, "Exit_Dynamics", "Code", "EPS_output")
wd$eps2 <-  file.path(root, "Exit_Dynamics", "Code", "EPS_output_small")
wd$csv <-  file.path(root, "Exit_Dynamics", "Code", "CSV_output")
rm(root)
dir.create(wd$eps2)
setwd(wd$code)
source("Useful_Functions.R")
source("ExitDynamics_Packages.R")
setwd(wd$data)
load("ExitDynamics_Data_V1.RData")
create.eps <- FALSE
create.csv <- FALSE
rm(list=ls()) # remove workspace objects
setwd("C:/Users/christian.tausch")
root <- file.path(getwd(), "Dropbox", "Project D", "3_R_Pro_D")
wd <- list()
wd$code <- file.path(root, "Exit_Dynamics", "Code")
wd$data <- file.path(root, "Exit_Dynamics", "Code", "Data")
wd$eps <-  file.path(root, "Exit_Dynamics", "Code", "EPS_output")
wd$eps2 <-  file.path(root, "Exit_Dynamics", "Code", "EPS_output_small")
wd$csv <-  file.path(root, "Exit_Dynamics", "Code", "CSV_output")
rm(root)
dir.create(wd$eps2)
wd$eps2
setwd(wd$code)
getwd()
wd$code
rm(list=ls()) # remove workspace objects
setwd("C:/Users/christian.tausch")
root <- file.path(getwd(), "Dropbox", "Project D", "3_R_Pro_D")
wd <- list()
wd$code <- file.path(root, "Exit_Dynamics", "Code")
wd$data <- file.path(root, "Exit_Dynamics", "Code", "Data")
wd$eps <-  file.path(root, "Exit_Dynamics", "Code", "EPS_output")
wd$eps2 <-  file.path(root, "Exit_Dynamics", "Code", "EPS_output_small")
wd$csv <-  file.path(root, "Exit_Dynamics", "Code", "CSV_output")
wd$code
root
getwd()
rm(list=ls()) # remove workspace objects
setwd("C:/Users/christian.tausch")
getwd()
