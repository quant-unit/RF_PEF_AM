d.multiple <- dGAtr(x = df$P2C.multi1,
mu = exp(predict(glms$m1_IO, what = "mu")),
# nu = glms$m1$nu.coefficients["(Intercept)"]
sigma = exp(predict(glms$m1_IO, what = "sigma")))
glms.out$m1$Q.multiple <- Q.multiple
Q.timing <- apply(df, 1, function(x) {
S1 <- weibull.Surv(x[["Investment_Date"]], x[["Exit_Date"]],
f.type, as.numeric(x[["FundAgeAI"]]), TRUE)
S2 <- weibull.Surv(x[["Investment_Date"]], x[["FundInv_Quarter"]],
f.type, as.numeric(x[["FundAgeAI"]]), TRUE)
return(S1/S2)
})
glms.out$t$Q.timing <- Q.timing
Q.timing_previousQuarter <- apply(df, 1, function(x) {
beforeExitDate <- base::as.Date(cut(as.Date(x[["Exit_Date"]]), "quarter")) - 1
S1 <- weibull.Surv(x[["Investment_Date"]], beforeExitDate,
f.type, as.numeric(x[["FundAgeAI"]]), TRUE)
S2 <- weibull.Surv(x[["Investment_Date"]], x[["FundInv_Quarter"]],
f.type, as.numeric(x[["FundAgeAI"]]), TRUE)
return(S1/S2)
})
d.survival <- apply(df, 1, function(x) {
weibull.Surv(x[["Investment_Date"]], x[["Exit_Date"]],
f.type, as.numeric(x[["FundAgeAI"]]), FALSE)  })
psObs <- function(x) {
x <- ifelse(x == 0, 0.0001, x)
x <- ifelse(x == 1, 0.9999, x)
return(x)
}
plot(Q.timing, Q.multiple)
# continuous Copula
loliCON <- function(para) {
# -sum(log(d.survival * d.multiple * ClayCopDerv(pobs(Q.multiple), pobs(Q.timing),para)))
-sum(log(d.survival * d.multiple * BiCopPDF(pobs(Q.multiple), pobs(Q.timing), par = para, family = 16)))
}
# plot(BiCopSim(2500, family = 16, par = 4))
glms.out$m1t$claytonCON <- optimize(loliCON, interval = c(1.001, 10))
glms.out$m1t$claytonCON
if(is.na(glms.out$m1t$claytonCON$objective)) {
print("next CON")
next
}
# discrete Copula (does not work)
if(FALSE) {
loliDIS <- function(para) {
-sum(log(d.multiple *
(ClayCopFPD(pobs(Q.multiple), pobs(Q.timing),para) - ClayCopFPD(pobs(Q.multiple), pobs(Q.timing_previousQuarter),para))
))
}
summary(Q.timing)
summary(Q.timing_previousQuarter)
summary(ClayCopFPD(pobs(Q.multiple), pobs(1-Q.timing),2) - ClayCopFPD(pobs(Q.multiple), pobs(1-Q.timing_previousQuarter),2))
loliDIS(0.1)
glms.out$m1t$claytonDIS <- optimize(loliDIS, interval = c(0,10))
glms.out$m1t$claytonDIS
if(is.na(glms.out$m1t$claytonDIS$objective)) {
print("next DIS")
next
}
}
iter.list[[paste("i",i,sep="")]] <- glms.out
}
# Output Preparation
if(TRUE) {
coefs <- list()
# Logit
x0 <- sapply(iter.list, function(x){
x$m0$mu.coefficients
})
coefs$m0$mu$obs <- x0
coefs$m0$mu$Mean <- colMeans(data.frame(t(x0)))
coefs$m0$mu$SD <- apply(data.frame(t(x0)), 2, sd)
# Gamma
for(coef in c("mu", "sigma")) {
obs <- sapply(iter.list, function(x){
x$m1[[paste(coef, "coefficients", sep = ".")]]
})
coefs$m1[[coef]][["obs"]] <- obs
coefs$m1[[coef]][["Mean"]] <- colMeans(data.frame(t(obs))) # mu
coefs$m1[[coef]][["SD"]] <- apply(data.frame(t(obs)), 2, sd)
}
Rsquared <- sapply(iter.list, function(x){
unlist(x$m1$Rsq)
})
coefs$m1$Rsq <- list(Mean = colMeans(data.frame(t(Rsquared))),
SD = apply(data.frame(t(Rsquared)), 2, sd))
# Bivariate
U.Timing <- obs <- sapply(iter.list, function(x){
x$t$Q.timing
})
U.Multiple <- obs <- sapply(iter.list, function(x){
x$m1$Q.multiple
})
CopDF <- data.frame(Timing = unlist(U.Timing), Multiple = unlist(U.Multiple))
cor(Q.timing, Q.multiple, method = "kendall")
plot(Q.timing, Q.multiple)
ccp <- sapply(iter.list, function(x){
x$m1t$claytonCON$minimum
})
coefs$copCON$Mean <- mean(ccp)
coefs$copCON$SD <- sd(ccp)
# AIC and BIC
get.fitness <- function(model) {
y <- sapply(iter.list, function(x){
x[[model]]$fitness
})
Mean <- colMeans(data.frame(t(y)))
SD <- apply(data.frame(t(y)), 2, sd)
return(list(c(Model = model, Var = "Mean", Mean),
c(Model = model, Var = "SD", SD)))
}
baic <- list()
for(model in c("m0", "m0_IO", "m1", "m1_IO")) {
baic[[model]] <- get.fitness(model)
}
df.baic <- data.frame(rbind_all(combine(baic)))
final.result <- list(coefs = coefs, BAIC = df.baic, CopDF = CopDF,
Iter = list(no.iterations = no.iterations, no.converged = length(iter.list)),
full.entry2exit = full.entry2exit.list)
return(final.result)
}
}
system.time(bo.GA <- estimate.bi.model("BO"))
system.time(vc.GA <- estimate.bi.model("VC"))
summary(bo.GA$full.entry2exit$m1.full)
summary(vc.GA$full.entry2exit$m1.full)
exp(0.599152)
summary(bo.GA$full.entry2exit$m1.full)
exp(0.751134)
estimate.bi.model <- function(f.type) {
no.iterations <- 2
final.result <- list()
# f.type <- "BO"
response1 <- "P2C.multi1.discounted"
predictors_0 <- c("RVPI_1","Holding_Period",
"ML_HYOAS.quarter", "MSCI.Multiple.Exit_1", "I(CMA.Index.Multi-1)")
if(f.type != "VC") {
predictors_1mu <- c("ML_HYOAS.quarter","MSCI.Multiple.Exit_1", "I(CMA.Index.Multi-1)")
} else {
predictors_1mu <- c("ML_HYOAS.quarter","MSCI.Multiple.Exit_1", "I(CMA.Index.Multi-1)", "Holding_Period", "ZombieStage")
}
predictors_1sigma <- c("Holding_Period", "Time2Exit")
formula0 <- as.formula(paste("hurdle0", paste(predictors_0, collapse=" + "), sep=" ~ "))
formula0_IO <- as.formula(paste("hurdle0", 1, sep=" ~ "))
formula1 <- as.formula(paste(response1, paste(predictors_1mu, collapse=" + "), sep=" ~ "))
formula1sigma <- as.formula(paste("", paste(predictors_1sigma, collapse=" + "), sep=" ~ "))
formula1_IO <- as.formula(paste(response1, 1, sep=" ~ "))
G.p2c$hurdle0 <- ifelse(G.p2c[,response1] > hurdle0, 1, 0)
full.entry2exit.list <- list()
if(TRUE) {
m0.full <- gamlss(formula0, data = G.p2c[G.p2c$Fund_InvestTypes == f.type, !(colnames(G.p2c) %in% c("Ev", "Ev2", "MOIC.dyn", "MOIC.end"))], family = BI(mu.link = logit))
m1.full <- gamlss(formula1, sigma.formula = formula1sigma,
data = subset(G.p2c[, !(colnames(G.p2c) %in% c("Ev", "Ev2", "MOIC.dyn", "MOIC.end"))],
hurdle0 == 1 & Fund_InvestTypes == f.type), family = GAtr)
m0.entryexit <- gamlss(formula0, data = G.p2c[G.p2c$Holding_Period == 0 &  G.p2c$Fund_InvestTypes == f.type, !(colnames(G.p2c) %in% c("Ev", "Ev2", "MOIC.dyn", "MOIC.end"))], family = BI(mu.link = logit))
m1.entryexit <- gamlss(formula1, sigma.formula = formula1sigma,
data = subset(G.p2c[G.p2c$Holding_Period == 0, !(colnames(G.p2c) %in% c("Ev", "Ev2", "MOIC.dyn", "MOIC.end"))],
hurdle0 == 1 & Fund_InvestTypes == f.type), family = GAtr)
full.entry2exit.list$m0.full <- m0.full
full.entry2exit.list$m1.full <- m1.full
full.entry2exit.list$m0.entryexit <- m0.entryexit
full.entry2exit.list$m1.entryexit <- m1.entryexit
}
set.seed(99)
iter.list <- list()
for(i in 1:no.iterations) {
df <- sample.subset(f.type, G.p2c)
# df$hurdle0 <- ifelse(df[,response1] > hurdle0, 1, 0)
glms <- list()
glms.out <- list()
# Full Covariate Model
glms$m0 <- gamlss(formula0, data = df, family = BI(mu.link = logit), control = gamlss.control(trace = FALSE))
try.m1 <- try(gamlss(formula1, sigma.formula = formula1sigma, data = subset(df, hurdle0 == 1), family = GAtr, control = gamlss.control(trace = FALSE)))
if(class(try.m1) == "try-error") {
next
}
glms$m1 <- try.m1
glms.out$m0$mu.coefficients <- glms$m0$mu.coefficients
glms.out$m0$fitness <- c(AIC = glms$m0$aic, BIC = glms$m0$sbc)
glms.out$m1$mu.coefficients <- glms$m1$mu.coefficients
glms.out$m1$sigma.coefficients <- glms$m1$sigma.coefficients
glms.out$m1$fitness <- c(AIC = glms$m1$aic, BIC = glms$m1$sbc)
glms.out$m1$Rsq <- Rsq(try.m1, type = "both")
# Intercept Only
glms$m0_IO <- gamlss(formula0_IO, data = df, family = BI(mu.link = logit), control = gamlss.control(trace = FALSE))
glms$m1_IO <- gamlss(formula1_IO, data = subset(df, hurdle0 == 1), family = GAtr, control = gamlss.control(trace = FALSE))
glms.out$m0_IO$fitness <- c(AIC = glms$m0_IO$aic, BIC = glms$m0_IO$sbc)
glms.out$m1_IO$fitness <- c(AIC = glms$m1_IO$aic, BIC = glms$m1_IO$sbc)
# predict quantiles
df <- df[df$hurdle0 == 1, ]
Q.multiple <- pGAtr(q = df$P2C.multi1,
mu = exp(predict(glms$m1_IO, what = "mu")),
# nu = glms$m1$nu.coefficients["(Intercept)"]
sigma = exp(predict(glms$m1_IO, what = "sigma")))
d.multiple <- dGAtr(x = df$P2C.multi1,
mu = exp(predict(glms$m1_IO, what = "mu")),
# nu = glms$m1$nu.coefficients["(Intercept)"]
sigma = exp(predict(glms$m1_IO, what = "sigma")))
glms.out$m1$Q.multiple <- Q.multiple
Q.timing <- apply(df, 1, function(x) {
S1 <- weibull.Surv(x[["Investment_Date"]], x[["Exit_Date"]],
f.type, as.numeric(x[["FundAgeAI"]]), TRUE)
S2 <- weibull.Surv(x[["Investment_Date"]], x[["FundInv_Quarter"]],
f.type, as.numeric(x[["FundAgeAI"]]), TRUE)
return(S1/S2)
})
glms.out$t$Q.timing <- Q.timing
Q.timing_previousQuarter <- apply(df, 1, function(x) {
beforeExitDate <- base::as.Date(cut(as.Date(x[["Exit_Date"]]), "quarter")) - 1
S1 <- weibull.Surv(x[["Investment_Date"]], beforeExitDate,
f.type, as.numeric(x[["FundAgeAI"]]), TRUE)
S2 <- weibull.Surv(x[["Investment_Date"]], x[["FundInv_Quarter"]],
f.type, as.numeric(x[["FundAgeAI"]]), TRUE)
return(S1/S2)
})
d.survival <- apply(df, 1, function(x) {
weibull.Surv(x[["Investment_Date"]], x[["Exit_Date"]],
f.type, as.numeric(x[["FundAgeAI"]]), FALSE)  })
psObs <- function(x) {
x <- ifelse(x == 0, 0.0001, x)
x <- ifelse(x == 1, 0.9999, x)
return(x)
}
plot(Q.timing, Q.multiple)
# continuous Copula
loliCON <- function(para) {
# -sum(log(d.survival * d.multiple * ClayCopDerv(pobs(Q.multiple), pobs(Q.timing),para)))
-sum(log(d.survival * d.multiple * BiCopPDF(pobs(Q.multiple), pobs(Q.timing), par = para, family = 16)))
}
# plot(BiCopSim(2500, family = 16, par = 4))
glms.out$m1t$claytonCON <- optimize(loliCON, interval = c(1.001, 10))
glms.out$m1t$claytonCON
if(is.na(glms.out$m1t$claytonCON$objective)) {
print("next CON")
next
}
# discrete Copula (does not work)
if(FALSE) {
loliDIS <- function(para) {
-sum(log(d.multiple *
(ClayCopFPD(pobs(Q.multiple), pobs(Q.timing),para) - ClayCopFPD(pobs(Q.multiple), pobs(Q.timing_previousQuarter),para))
))
}
summary(Q.timing)
summary(Q.timing_previousQuarter)
summary(ClayCopFPD(pobs(Q.multiple), pobs(1-Q.timing),2) - ClayCopFPD(pobs(Q.multiple), pobs(1-Q.timing_previousQuarter),2))
loliDIS(0.1)
glms.out$m1t$claytonDIS <- optimize(loliDIS, interval = c(0,10))
glms.out$m1t$claytonDIS
if(is.na(glms.out$m1t$claytonDIS$objective)) {
print("next DIS")
next
}
}
iter.list[[paste("i",i,sep="")]] <- glms.out
}
# Output Preparation
if(TRUE) {
coefs <- list()
# Logit
x0 <- sapply(iter.list, function(x){
x$m0$mu.coefficients
})
coefs$m0$mu$obs <- x0
coefs$m0$mu$Mean <- colMeans(data.frame(t(x0)))
coefs$m0$mu$SD <- apply(data.frame(t(x0)), 2, sd)
# Gamma
for(coef in c("mu", "sigma")) {
obs <- sapply(iter.list, function(x){
x$m1[[paste(coef, "coefficients", sep = ".")]]
})
coefs$m1[[coef]][["obs"]] <- obs
coefs$m1[[coef]][["Mean"]] <- colMeans(data.frame(t(obs))) # mu
coefs$m1[[coef]][["SD"]] <- apply(data.frame(t(obs)), 2, sd)
}
Rsquared <- sapply(iter.list, function(x){
unlist(x$m1$Rsq)
})
coefs$m1$Rsq <- list(Mean = colMeans(data.frame(t(Rsquared))),
SD = apply(data.frame(t(Rsquared)), 2, sd))
# Bivariate
U.Timing <- obs <- sapply(iter.list, function(x){
x$t$Q.timing
})
U.Multiple <- obs <- sapply(iter.list, function(x){
x$m1$Q.multiple
})
CopDF <- data.frame(Timing = unlist(U.Timing), Multiple = unlist(U.Multiple))
cor(Q.timing, Q.multiple, method = "kendall")
plot(Q.timing, Q.multiple)
ccp <- sapply(iter.list, function(x){
x$m1t$claytonCON$minimum
})
coefs$copCON$Mean <- mean(ccp)
coefs$copCON$SD <- sd(ccp)
# AIC and BIC
get.fitness <- function(model) {
y <- sapply(iter.list, function(x){
x[[model]]$fitness
})
Mean <- colMeans(data.frame(t(y)))
SD <- apply(data.frame(t(y)), 2, sd)
return(list(c(Model = model, Var = "Mean", Mean),
c(Model = model, Var = "SD", SD)))
}
baic <- list()
for(model in c("m0", "m0_IO", "m1", "m1_IO")) {
baic[[model]] <- get.fitness(model)
}
df.baic <- data.frame(rbind_all(combine(baic)))
final.result <- list(coefs = coefs, BAIC = df.baic, CopDF = CopDF,
Iter = list(no.iterations = no.iterations, no.converged = length(iter.list)),
full.entry2exit = full.entry2exit.list)
return(final.result)
}
}
system.time(bo.GA <- estimate.bi.model("BO"))
system.time(vc.GA <- estimate.bi.model("VC"))
summary(bo.GA$full.entry2exit$m1.full)
estimate.bi.model <- function(f.type) {
no.iterations <- 2
final.result <- list()
# f.type <- "BO"
response1 <- "P2C.multi1.discounted"
predictors_0 <- c("RVPI_1","Holding_Period","ML_HYOAS.quarter", "MSCI.Multiple.Exit_1", "I(CMA.Index.Multi-1)")
if(f.type != "VC") {
predictors_1mu <- c("ML_HYOAS.quarter","MSCI.Multiple.Exit_1", "I(CMA.Index.Multi-1)", "Holding_Period")
} else {
predictors_1mu <- c("ML_HYOAS.quarter","MSCI.Multiple.Exit_1", "I(CMA.Index.Multi-1)", "Holding_Period", "ZombieStage")
}
predictors_1sigma <- c("Holding_Period", "Time2Exit")
formula0 <- as.formula(paste("hurdle0", paste(predictors_0, collapse=" + "), sep=" ~ "))
formula0_IO <- as.formula(paste("hurdle0", 1, sep=" ~ "))
formula1 <- as.formula(paste(response1, paste(predictors_1mu, collapse=" + "), sep=" ~ "))
formula1sigma <- as.formula(paste("", paste(predictors_1sigma, collapse=" + "), sep=" ~ "))
formula1_IO <- as.formula(paste(response1, 1, sep=" ~ "))
G.p2c$hurdle0 <- ifelse(G.p2c[,response1] > hurdle0, 1, 0)
full.entry2exit.list <- list()
if(TRUE) {
m0.full <- gamlss(formula0, data = G.p2c[G.p2c$Fund_InvestTypes == f.type, !(colnames(G.p2c) %in% c("Ev", "Ev2", "MOIC.dyn", "MOIC.end"))], family = BI(mu.link = logit))
m1.full <- gamlss(formula1, sigma.formula = formula1sigma,
data = subset(G.p2c[, !(colnames(G.p2c) %in% c("Ev", "Ev2", "MOIC.dyn", "MOIC.end"))],
hurdle0 == 1 & Fund_InvestTypes == f.type), family = GAtr)
m0.entryexit <- gamlss(formula0, data = G.p2c[G.p2c$Holding_Period == 0 &  G.p2c$Fund_InvestTypes == f.type, !(colnames(G.p2c) %in% c("Ev", "Ev2", "MOIC.dyn", "MOIC.end"))], family = BI(mu.link = logit))
m1.entryexit <- gamlss(formula1, sigma.formula = formula1sigma,
data = subset(G.p2c[G.p2c$Holding_Period == 0, !(colnames(G.p2c) %in% c("Ev", "Ev2", "MOIC.dyn", "MOIC.end"))],
hurdle0 == 1 & Fund_InvestTypes == f.type), family = GAtr)
full.entry2exit.list$m0.full <- m0.full
full.entry2exit.list$m1.full <- m1.full
full.entry2exit.list$m0.entryexit <- m0.entryexit
full.entry2exit.list$m1.entryexit <- m1.entryexit
}
set.seed(99)
iter.list <- list()
for(i in 1:no.iterations) {
df <- sample.subset(f.type, G.p2c)
# df$hurdle0 <- ifelse(df[,response1] > hurdle0, 1, 0)
glms <- list()
glms.out <- list()
# Full Covariate Model
glms$m0 <- gamlss(formula0, data = df, family = BI(mu.link = logit), control = gamlss.control(trace = FALSE))
try.m1 <- try(gamlss(formula1, sigma.formula = formula1sigma, data = subset(df, hurdle0 == 1), family = GAtr, control = gamlss.control(trace = FALSE)))
if(class(try.m1) == "try-error") {
next
}
glms$m1 <- try.m1
glms.out$m0$mu.coefficients <- glms$m0$mu.coefficients
glms.out$m0$fitness <- c(AIC = glms$m0$aic, BIC = glms$m0$sbc)
glms.out$m1$mu.coefficients <- glms$m1$mu.coefficients
glms.out$m1$sigma.coefficients <- glms$m1$sigma.coefficients
glms.out$m1$fitness <- c(AIC = glms$m1$aic, BIC = glms$m1$sbc)
glms.out$m1$Rsq <- Rsq(try.m1, type = "both")
# Intercept Only
glms$m0_IO <- gamlss(formula0_IO, data = df, family = BI(mu.link = logit), control = gamlss.control(trace = FALSE))
glms$m1_IO <- gamlss(formula1_IO, data = subset(df, hurdle0 == 1), family = GAtr, control = gamlss.control(trace = FALSE))
glms.out$m0_IO$fitness <- c(AIC = glms$m0_IO$aic, BIC = glms$m0_IO$sbc)
glms.out$m1_IO$fitness <- c(AIC = glms$m1_IO$aic, BIC = glms$m1_IO$sbc)
# predict quantiles
df <- df[df$hurdle0 == 1, ]
Q.multiple <- pGAtr(q = df$P2C.multi1,
mu = exp(predict(glms$m1_IO, what = "mu")),
# nu = glms$m1$nu.coefficients["(Intercept)"]
sigma = exp(predict(glms$m1_IO, what = "sigma")))
d.multiple <- dGAtr(x = df$P2C.multi1,
mu = exp(predict(glms$m1_IO, what = "mu")),
# nu = glms$m1$nu.coefficients["(Intercept)"]
sigma = exp(predict(glms$m1_IO, what = "sigma")))
glms.out$m1$Q.multiple <- Q.multiple
Q.timing <- apply(df, 1, function(x) {
S1 <- weibull.Surv(x[["Investment_Date"]], x[["Exit_Date"]],
f.type, as.numeric(x[["FundAgeAI"]]), TRUE)
S2 <- weibull.Surv(x[["Investment_Date"]], x[["FundInv_Quarter"]],
f.type, as.numeric(x[["FundAgeAI"]]), TRUE)
return(S1/S2)
})
glms.out$t$Q.timing <- Q.timing
Q.timing_previousQuarter <- apply(df, 1, function(x) {
beforeExitDate <- base::as.Date(cut(as.Date(x[["Exit_Date"]]), "quarter")) - 1
S1 <- weibull.Surv(x[["Investment_Date"]], beforeExitDate,
f.type, as.numeric(x[["FundAgeAI"]]), TRUE)
S2 <- weibull.Surv(x[["Investment_Date"]], x[["FundInv_Quarter"]],
f.type, as.numeric(x[["FundAgeAI"]]), TRUE)
return(S1/S2)
})
d.survival <- apply(df, 1, function(x) {
weibull.Surv(x[["Investment_Date"]], x[["Exit_Date"]],
f.type, as.numeric(x[["FundAgeAI"]]), FALSE)  })
psObs <- function(x) {
x <- ifelse(x == 0, 0.0001, x)
x <- ifelse(x == 1, 0.9999, x)
return(x)
}
plot(Q.timing, Q.multiple)
# continuous Copula
loliCON <- function(para) {
# -sum(log(d.survival * d.multiple * ClayCopDerv(pobs(Q.multiple), pobs(Q.timing),para)))
-sum(log(d.survival * d.multiple * BiCopPDF(pobs(Q.multiple), pobs(Q.timing), par = para, family = 16)))
}
# plot(BiCopSim(2500, family = 16, par = 4))
glms.out$m1t$claytonCON <- optimize(loliCON, interval = c(1.001, 10))
glms.out$m1t$claytonCON
if(is.na(glms.out$m1t$claytonCON$objective)) {
print("next CON")
next
}
# discrete Copula (does not work)
if(FALSE) {
loliDIS <- function(para) {
-sum(log(d.multiple *
(ClayCopFPD(pobs(Q.multiple), pobs(Q.timing),para) - ClayCopFPD(pobs(Q.multiple), pobs(Q.timing_previousQuarter),para))
))
}
summary(Q.timing)
summary(Q.timing_previousQuarter)
summary(ClayCopFPD(pobs(Q.multiple), pobs(1-Q.timing),2) - ClayCopFPD(pobs(Q.multiple), pobs(1-Q.timing_previousQuarter),2))
loliDIS(0.1)
glms.out$m1t$claytonDIS <- optimize(loliDIS, interval = c(0,10))
glms.out$m1t$claytonDIS
if(is.na(glms.out$m1t$claytonDIS$objective)) {
print("next DIS")
next
}
}
iter.list[[paste("i",i,sep="")]] <- glms.out
}
# Output Preparation
if(TRUE) {
coefs <- list()
# Logit
x0 <- sapply(iter.list, function(x){
x$m0$mu.coefficients
})
coefs$m0$mu$obs <- x0
coefs$m0$mu$Mean <- colMeans(data.frame(t(x0)))
coefs$m0$mu$SD <- apply(data.frame(t(x0)), 2, sd)
# Gamma
for(coef in c("mu", "sigma")) {
obs <- sapply(iter.list, function(x){
x$m1[[paste(coef, "coefficients", sep = ".")]]
})
coefs$m1[[coef]][["obs"]] <- obs
coefs$m1[[coef]][["Mean"]] <- colMeans(data.frame(t(obs))) # mu
coefs$m1[[coef]][["SD"]] <- apply(data.frame(t(obs)), 2, sd)
}
Rsquared <- sapply(iter.list, function(x){
unlist(x$m1$Rsq)
})
coefs$m1$Rsq <- list(Mean = colMeans(data.frame(t(Rsquared))),
SD = apply(data.frame(t(Rsquared)), 2, sd))
# Bivariate
U.Timing <- obs <- sapply(iter.list, function(x){
x$t$Q.timing
})
U.Multiple <- obs <- sapply(iter.list, function(x){
x$m1$Q.multiple
})
CopDF <- data.frame(Timing = unlist(U.Timing), Multiple = unlist(U.Multiple))
cor(Q.timing, Q.multiple, method = "kendall")
plot(Q.timing, Q.multiple)
ccp <- sapply(iter.list, function(x){
x$m1t$claytonCON$minimum
})
coefs$copCON$Mean <- mean(ccp)
coefs$copCON$SD <- sd(ccp)
# AIC and BIC
get.fitness <- function(model) {
y <- sapply(iter.list, function(x){
x[[model]]$fitness
})
Mean <- colMeans(data.frame(t(y)))
SD <- apply(data.frame(t(y)), 2, sd)
return(list(c(Model = model, Var = "Mean", Mean),
c(Model = model, Var = "SD", SD)))
}
baic <- list()
for(model in c("m0", "m0_IO", "m1", "m1_IO")) {
baic[[model]] <- get.fitness(model)
}
df.baic <- data.frame(rbind_all(combine(baic)))
final.result <- list(coefs = coefs, BAIC = df.baic, CopDF = CopDF,
Iter = list(no.iterations = no.iterations, no.converged = length(iter.list)),
full.entry2exit = full.entry2exit.list)
return(final.result)
}
}
system.time(bo.GA <- estimate.bi.model("BO"))
system.time(vc.GA <- estimate.bi.model("VC"))
summary(bo.GA$full.entry2exit$m1.full)
summary(bo.GA$full.entry2exit$m0.full)
summary(bo.GA$full.entry2exit$m1.full)
summary(vc.GA$full.entry2exit$m0.full)
summary(vc.GA$full.entry2exit$m1.full)
