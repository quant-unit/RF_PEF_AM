# Gamma Density Function == Intensity Form
lambda.dy <- function(x) dgamma(x,shape=SHAPE1,scale=SCALE1) * jump.no
MAXI <- optimize(function(x) lambda.dy(x), lower = LOW, upper = UP,  maximum = TRUE)
lambda.max <- MAXI$objective
if(curveit){
par(mfrow=c(2,1),mar=c(2,4,1,1),oma=c(2,1,0.5,0.5),ps=14)
curve(lambda.dy(x),xlim=c(0,40), ylab="Investment Intensity")
abline(h=lambda.max, col="green",lwd=2,lty=3) ; abline(h=0,v=0,col="grey")
legend("right",bty="n",legend = c(paste("Jumps:",jump.no),paste("Shape:",SHAPE1),paste("Scale:",SCALE1)),lty=0,y.intersp=1.3)
}
# Start Settings
t <- 0 ; ci <- 0 ; Ci <- 0 ; OC <- 1 ; PTM <- "-"
while (t < UP) {
t <- t + log(runif(1))/-lambda.max
if (runif(1) < lambda.dy(t)/lambda.max){
# JUMP TIME
ci <- c(ci, t)
# JUMP SIZE
ExpFutureJumps <- integrate(function(x) lambda.dy(x), lower = t, upper = UP)
mue.asset <- max(0.01,OC)/max(1,ExpFutureJumps$value)
Sig.asset <- mue.asset * sd.factor
JuSi <- rlnorm(1, meanlog= log(mue.asset^2*sqrt(1/(mue.asset^2+Sig.asset^2))) , sdlog= log(Sig.asset^2/mue.asset^2+1))
Ci <- c(Ci,JuSi)
# Open Commitment
OC <- max(OC - JuSi,0)
# Prospective: point type marks
PTM <- c(PTM,sample(c("VC","BO","RE"),1))
}
}
if(curveit){
plot(x= c(ci,50), y=c(cumsum(Ci),sum(Ci)), type = "s",xlim=c(0,40),ylim=c(0,max(1,sum(Ci))),ylab = "Cum. Contributions")
abline(h=1,col="red",lwd=2,lty=3)
legend("right",bty="n",legend = c(paste("Jumps:",length(ci)),paste("CumCon:",round(sum(Ci),2))),lty=0,y.intersp=1.3)
mtext("Time in Quarters",side=1,line = 2.5)
# Reset par()
par(mfrow=c(1,1),mar=c(4,4,1,1))
}
out <- data.frame(JumpTime=ci,c=ceiling(ci),C=Ci,OpenComm=1-cumsum(Ci),TypeMark=PTM)
if(expand){
out <- merge(x= data.frame(c= LOW:UP, CC=NA), y= out, by="c",all=TRUE)
x <- out$OpenComm
ind = which(!is.na(x))
out$OpenComm <- rep(x[ind], times = diff(c(ind, length(x) + 1) ))
out$CC <- 1 - out$OpenComm
}
return(out)
}
SimPoi(sample(seq(2,3,0.1),1), sample(seq(2,4,0.1),1), sample(8:12,1),expand = TRUE)
SimPoi(sample(seq(2,3,0.1),1), sample(seq(2,4,0.1),1), sample(8:12,1),expand = F)
SimPoi(sample(seq(2,3,0.1),1), sample(seq(2,4,0.1),1), sample(8:12,1),expand = T)
x <- SimPoi(sample(seq(2,3,0.1),1), sample(seq(2,4,0.1),1), sample(8:12,1),expand = T)
plot(x$CC)
plot(x$x, x$CC)
plot(x$CC,type="S")
plot(x$CC,type="s")
View(x)
duplicated(x$c)
duplicated(x$c) * Na
duplicated(x$c) * NA
duplicated(x$c)
x$dup <- duplicated(x$c)
View(x)
x$dup <- duplicated(x$c,fromLast = F)
x$dup <- duplicated(x$c,fromLast = TRUE)
x$dup <- duplicated(x$c,fromLast = TRUE)
SimPoi <- function(shape,scale,jumps,curveit=TRUE,expand=FALSE){
# Variable Function Parameters
SHAPE1 <- shape
SCALE1 <- scale
jump.no <- jumps
# Fixed In-Function Parameters
LOW <- 0
UP <- 100
sd.factor <- 0.25
# Gamma Density Function == Intensity Form
lambda.dy <- function(x) dgamma(x,shape=SHAPE1,scale=SCALE1) * jump.no
MAXI <- optimize(function(x) lambda.dy(x), lower = LOW, upper = UP,  maximum = TRUE)
lambda.max <- MAXI$objective
if(curveit){
par(mfrow=c(2,1),mar=c(2,4,1,1),oma=c(2,1,0.5,0.5),ps=14)
curve(lambda.dy(x),xlim=c(0,40), ylab="Investment Intensity")
abline(h=lambda.max, col="green",lwd=2,lty=3) ; abline(h=0,v=0,col="grey")
legend("right",bty="n",legend = c(paste("Jumps:",jump.no),paste("Shape:",SHAPE1),paste("Scale:",SCALE1)),lty=0,y.intersp=1.3)
}
# Start Settings
t <- 0 ; ci <- 0 ; Ci <- 0 ; OC <- 1 ; PTM <- "-"
while (t < UP) {
t <- t + log(runif(1))/-lambda.max
if (runif(1) < lambda.dy(t)/lambda.max){
# JUMP TIME
ci <- c(ci, t)
# JUMP SIZE
ExpFutureJumps <- integrate(function(x) lambda.dy(x), lower = t, upper = UP)
mue.asset <- max(0.01,OC)/max(1,ExpFutureJumps$value)
Sig.asset <- mue.asset * sd.factor
JuSi <- rlnorm(1, meanlog= log(mue.asset^2*sqrt(1/(mue.asset^2+Sig.asset^2))) , sdlog= log(Sig.asset^2/mue.asset^2+1))
Ci <- c(Ci,JuSi)
# Open Commitment
OC <- max(OC - JuSi,0)
# Prospective: point type marks
PTM <- c(PTM,sample(c("VC","BO","RE"),1))
}
}
if(curveit){
plot(x= c(ci,50), y=c(cumsum(Ci),sum(Ci)), type = "s",xlim=c(0,40),ylim=c(0,max(1,sum(Ci))),ylab = "Cum. Contributions")
abline(h=1,col="red",lwd=2,lty=3)
legend("right",bty="n",legend = c(paste("Jumps:",length(ci)),paste("CumCon:",round(sum(Ci),2))),lty=0,y.intersp=1.3)
mtext("Time in Quarters",side=1,line = 2.5)
# Reset par()
par(mfrow=c(1,1),mar=c(4,4,1,1))
}
out <- data.frame(JumpTime=ci,c=ceiling(ci),C=Ci,OpenComm=1-cumsum(Ci),TypeMark=PTM)
if(expand){
out <- merge(x= data.frame(c= LOW:UP, CC=NA), y= out, by="c",all=TRUE)
x <- out$OpenComm
ind = which(!is.na(x))
out$OpenComm <- rep(x[ind], times = diff(c(ind, length(x) + 1) ))
out$CC <- 1 - out$OpenComm
out[duplicated(out$c,fromLast = TRUE), "c"] <- NA
}
return(out)
}
# Test
x <- SimPoi(sample(seq(2,3,0.1),1), sample(seq(2,4,0.1),1), sample(8:12,1),expand = T)
View(x)
x <- SimPoi(sample(seq(2,3,0.1),1), sample(seq(2,4,0.1),1), sample(8:12,1),expand = T)
View(x)
x <- SimPoi(sample(seq(2,3,0.1),1), sample(seq(2,4,0.1),1), sample(8:12,1),expand = T)
View(x)
plot(x$c,x$CC)
plot(x$c,x$CC,type="S",xlim = c(0,25))
View(x)
View(x)
# 2.d) Nonhomogeneous Poisson Thinning ------------
SimPoi <- function(shape,scale,jumps,curveit=TRUE,expand=FALSE){
# Variable Function Parameters
SHAPE1 <- shape
SCALE1 <- scale
jump.no <- jumps
# Fixed In-Function Parameters
LOW <- 0
UP <- 100
sd.factor <- 0.25
# Gamma Density Function == Intensity Form
lambda.dy <- function(x) dgamma(x,shape=SHAPE1,scale=SCALE1) * jump.no
MAXI <- optimize(function(x) lambda.dy(x), lower = LOW, upper = UP,  maximum = TRUE)
lambda.max <- MAXI$objective
if(curveit){
par(mfrow=c(2,1),mar=c(2,4,1,1),oma=c(2,1,0.5,0.5),ps=14)
curve(lambda.dy(x),xlim=c(0,40), ylab="Investment Intensity")
abline(h=lambda.max, col="green",lwd=2,lty=3) ; abline(h=0,v=0,col="grey")
legend("right",bty="n",legend = c(paste("Jumps:",jump.no),paste("Shape:",SHAPE1),paste("Scale:",SCALE1)),lty=0,y.intersp=1.3)
}
# Start Settings
t <- 0 ; ci <- 0 ; Ci <- 0 ; OC <- 1 ; PTM <- "-"
while (t < UP) {
t <- t + log(runif(1))/-lambda.max
if (runif(1) < lambda.dy(t)/lambda.max){
# JUMP TIME
ci <- c(ci, t)
# JUMP SIZE
ExpFutureJumps <- integrate(function(x) lambda.dy(x), lower = t, upper = UP)
mue.asset <- max(0.01,OC)/max(1,ExpFutureJumps$value)
Sig.asset <- mue.asset * sd.factor
JuSi <- rlnorm(1, meanlog= log(mue.asset^2*sqrt(1/(mue.asset^2+Sig.asset^2))) , sdlog= log(Sig.asset^2/mue.asset^2+1))
Ci <- c(Ci,JuSi)
# Open Commitment
OC <- max(OC - JuSi,0)
# Prospective: point type marks
PTM <- c(PTM,sample(c("VC","BO","RE"),1))
}
}
if(curveit){
plot(x= c(ci,50), y=c(cumsum(Ci),sum(Ci)), type = "s",xlim=c(0,40),ylim=c(0,max(1,sum(Ci))),ylab = "Cum. Contributions")
abline(h=1,col="red",lwd=2,lty=3)
legend("right",bty="n",legend = c(paste("Jumps:",length(ci)),paste("CumCon:",round(sum(Ci),2))),lty=0,y.intersp=1.3)
mtext("Time in Quarters",side=1,line = 2.5)
# Reset par()
par(mfrow=c(1,1),mar=c(4,4,1,1))
}
out <- data.frame(JumpTime=ci,c=ceiling(ci),C=Ci,OpenComm=1-cumsum(Ci),TypeMark=PTM)
if(expand){
out <- merge(x= data.frame(c= LOW:UP, CC=NA), y= out, by="c",all=TRUE)
x <- out$OpenComm
ind = which(!is.na(x))
out$OpenComm <- rep(x[ind], times = diff(c(ind, length(x) + 1) ))
out$CC <- 1 - out$OpenComm
out[duplicated(out$c,fromLast = TRUE), "c"] <- out[duplicated(out$c,fromLast = TRUE),"JumpTime"]
}
return(out)
}
# Test
x <- SimPoi(sample(seq(2,3,0.1),1), sample(seq(2,4,0.1),1), sample(8:12,1),expand = T)
plot(x$c,x$CC,type="S",xlim = c(0,25))
# 2.d) Nonhomogeneous Poisson Thinning ------------
SimPoi <- function(shape,scale,jumps,curveit=TRUE,expand=FALSE){
# Variable Function Parameters
SHAPE1 <- shape
SCALE1 <- scale
jump.no <- jumps
# Fixed In-Function Parameters
LOW <- 0
UP <- 100
sd.factor <- 0.25
# Gamma Density Function == Intensity Form
lambda.dy <- function(x) dgamma(x,shape=SHAPE1,scale=SCALE1) * jump.no
MAXI <- optimize(function(x) lambda.dy(x), lower = LOW, upper = UP,  maximum = TRUE)
lambda.max <- MAXI$objective
if(curveit){
par(mfrow=c(2,1),mar=c(2,4,1,1),oma=c(2,1,0.5,0.5),ps=14)
curve(lambda.dy(x),xlim=c(0,40), ylab="Investment Intensity")
abline(h=lambda.max, col="green",lwd=2,lty=3) ; abline(h=0,v=0,col="grey")
legend("right",bty="n",legend = c(paste("Jumps:",jump.no),paste("Shape:",SHAPE1),paste("Scale:",SCALE1)),lty=0,y.intersp=1.3)
}
# Start Settings
t <- 0 ; ci <- 0 ; Ci <- 0 ; OC <- 1 ; PTM <- "-"
while (t < UP) {
t <- t + log(runif(1))/-lambda.max
if (runif(1) < lambda.dy(t)/lambda.max){
# JUMP TIME
ci <- c(ci, t)
# JUMP SIZE
ExpFutureJumps <- integrate(function(x) lambda.dy(x), lower = t, upper = UP)
mue.asset <- max(0.01,OC)/max(1,ExpFutureJumps$value)
Sig.asset <- mue.asset * sd.factor
JuSi <- rlnorm(1, meanlog= log(mue.asset^2*sqrt(1/(mue.asset^2+Sig.asset^2))) , sdlog= log(Sig.asset^2/mue.asset^2+1))
Ci <- c(Ci,JuSi)
# Open Commitment
OC <- max(OC - JuSi,0)
# Prospective: point type marks
PTM <- c(PTM,sample(c("VC","BO","RE"),1))
}
}
if(curveit){
plot(x= c(ci,50), y=c(cumsum(Ci),sum(Ci)), type = "s",xlim=c(0,40),ylim=c(0,max(1,sum(Ci))),ylab = "Cum. Contributions")
abline(h=1,col="red",lwd=2,lty=3)
legend("right",bty="n",legend = c(paste("Jumps:",length(ci)),paste("CumCon:",round(sum(Ci),2))),lty=0,y.intersp=1.3)
mtext("Time in Quarters",side=1,line = 2.5)
# Reset par()
par(mfrow=c(1,1),mar=c(4,4,1,1))
}
out <- data.frame(JumpTime=ci,c=ceiling(ci),C=Ci,OpenComm=1-cumsum(Ci),TypeMark=PTM)
if(expand){
out <- merge(x= data.frame(c= LOW:UP, CC=NA), y= out, by="c",all=TRUE)
x <- out$OpenComm
ind = which(!is.na(x))
out$OpenComm <- rep(x[ind], times = diff(c(ind, length(x) + 1) ))
out$CC <- 1 - out$OpenComm
out[duplicated(out$c,fromLast = TRUE), "c"] <- out[duplicated(out$c,fromLast = TRUE),"JumpTime"]
}
return(out)
}
# Test
x <- SimPoi(sample(seq(2,3,0.1),1), sample(seq(2,4,0.1),1), sample(8:12,1),expand = T)
plot(x$c,x$CC,type="S",xlim = c(0,25))
View(x)
x$c %in% 1:100
View(x)
x$c %in% 0:100
x <- x[x$c %in% 0:100,]
View(x)
View(x)
SimPoi <- function(shape,scale,jumps,curveit=TRUE,expand=FALSE){
# Variable Function Parameters
SHAPE1 <- shape
SCALE1 <- scale
jump.no <- jumps
# Fixed In-Function Parameters
LOW <- 0
UP <- 100
sd.factor <- 0.25
# Gamma Density Function == Intensity Form
lambda.dy <- function(x) dgamma(x,shape=SHAPE1,scale=SCALE1) * jump.no
MAXI <- optimize(function(x) lambda.dy(x), lower = LOW, upper = UP,  maximum = TRUE)
lambda.max <- MAXI$objective
if(curveit){
par(mfrow=c(2,1),mar=c(2,4,1,1),oma=c(2,1,0.5,0.5),ps=14)
curve(lambda.dy(x),xlim=c(0,40), ylab="Investment Intensity")
abline(h=lambda.max, col="green",lwd=2,lty=3) ; abline(h=0,v=0,col="grey")
legend("right",bty="n",legend = c(paste("Jumps:",jump.no),paste("Shape:",SHAPE1),paste("Scale:",SCALE1)),lty=0,y.intersp=1.3)
}
# Start Settings
t <- 0 ; ci <- 0 ; Ci <- 0 ; OC <- 1 ; PTM <- "-"
while (t < UP) {
t <- t + log(runif(1))/-lambda.max
if (runif(1) < lambda.dy(t)/lambda.max){
# JUMP TIME
ci <- c(ci, t)
# JUMP SIZE
ExpFutureJumps <- integrate(function(x) lambda.dy(x), lower = t, upper = UP)
mue.asset <- max(0.01,OC)/max(1,ExpFutureJumps$value)
Sig.asset <- mue.asset * sd.factor
JuSi <- rlnorm(1, meanlog= log(mue.asset^2*sqrt(1/(mue.asset^2+Sig.asset^2))) , sdlog= log(Sig.asset^2/mue.asset^2+1))
Ci <- c(Ci,JuSi)
# Open Commitment
OC <- max(OC - JuSi,0)
# Prospective: point type marks
PTM <- c(PTM,sample(c("VC","BO","RE"),1))
}
}
if(curveit){
plot(x= c(ci,50), y=c(cumsum(Ci),sum(Ci)), type = "s",xlim=c(0,40),ylim=c(0,max(1,sum(Ci))),ylab = "Cum. Contributions")
abline(h=1,col="red",lwd=2,lty=3)
legend("right",bty="n",legend = c(paste("Jumps:",length(ci)),paste("CumCon:",round(sum(Ci),2))),lty=0,y.intersp=1.3)
mtext("Time in Quarters",side=1,line = 2.5)
# Reset par()
par(mfrow=c(1,1),mar=c(4,4,1,1))
}
out <- data.frame(JumpTime=ci,c=ceiling(ci),C=Ci,OpenComm=1-cumsum(Ci),TypeMark=PTM)
if(expand){
out <- merge(x= data.frame(c= LOW:UP, CC=NA), y= out, by="c",all=TRUE)
x <- out$OpenComm
ind = which(!is.na(x))
out$OpenComm <- rep(x[ind], times = diff(c(ind, length(x) + 1) ))
out$CC <- 1 - out$OpenComm
}
return(out)
}
x <- SimPoi(sample(seq(2,3,0.1),1), sample(seq(2,4,0.1),1), sample(8:12,1),expand = T)
View(x)
x <- 1
(1 + x)^(1/x)
x <- seq(0,1,0.1)
(1 + x)^(1/x)
1/0
(1 + x * 2)^(1/x)
x <- seq(0,1,0.1)
(1 + x * 2)^(1/x)
(1 + x * 2)^(-1/x)
x <- seq(0,0.1,0.01)
(1 + x * 2)^(1/x)
(1 + x * 2)^(-1/x)
(1 + x * 1)^(1/x)
(1 + x * 1)^(-1/x)
x <- seq(0,0.01,0.001)
(1 + x * 1)^(1/x)
x <- seq(0,0.01,0.001)
(1 + x * 1)^(1/x)
(1 + x * 1)^(-1/x)
x <- seq(0,0.0001,0.000001)
(1 + x * 1)^(1/x)
(1 + x * 1)^(-1/x)
exp(1)
x <- seq(0,0.001,0.0001)
(1 + x * 1)^(1/x)
(1 + x * 1)^(-1/x)
1/exp(1)
(1 + x * 2)^(1/x)
(1 + x * 2)^(-1/x)
###########################
## Exit Dynamics: Main File
###########################
## 0) Prologue -------
rm(list=ls()) # remove workspace objects
computer <- "mac"
if(computer == "win") root <- file.path("C:/Users/christian.tausch", "Dropbox", "Project D", "3_R_Pro_D")
if(computer == "mac") root <- file.path("~", "Dropbox", "Project D", "3_R_Pro_D")
# dir.create(file.path(root, "Literature Citations"))
wd <- list()
wd$code <- file.path(root, "Exit_Dynamics", "Code")
wd$data <- file.path(root, "Exit_Dynamics", "Code", "Data")
wd$eps <-  file.path(root, "Exit_Dynamics", "Code", "EPS_output")
wd$csv <-  file.path(root, "Exit_Dynamics", "Code", "CSV_output")
rm(root,computer)
#dir.create(wd$eps)
#dir.create(wd$csv)
setwd(wd$code)
source("Useful_Functions.R")
source("ExitDynamics_Packages.R")
setwd(wd$data)
load("ExitDynamics_Data_V1.RData")
create.eps <- FALSE
create.csv <- FALSE
## 00) Reduce Input Data ------
g.p2c2 <- g.p2c2[g.p2c2$Fund_InvestTypes %in% c("BO", "VC"), ]
colnames(g.p2c2)
g.sum <- g.sum[g.sum$Type %in% c("BO", "VC"),
c("Type", "Fund_ID", "InvDate", "ExitDate", "YearInvest", "Vintage", "MOIC")]
table(g.sum$Type)
table(g.p2c2$Fund_InvestTypes)
## 1) Timing   ------
par(par_default)
setwd(wd$code)
source("ExitDynamics_Timing.R")
sun(as.numeric(g.sum$ExitDate - g.sum$InvDate)/365.25)
length(names(table(g.sum$Fund_ID[g.sum$Type == "BO"])))
list(
BO_Funds = length(levels(as.factor(as.character(g.sum$Fund_ID[g.sum$Type == "BO"])))),
VC_Funds = length(levels(as.factor(as.character(g.sum$Fund_ID[g.sum$Type == "VC"])))),
BO_VC_Funds = length(levels(as.factor(as.character(g.sum$Fund_ID[g.sum$Type %in% c("BO", "VC")])))),
Censoring_Companies = table(is.na(g.sum$ExitDate),g.sum$Type) # exit vs right censored events
)
# Non-Parametric Cox Regression (partial likelihood)
np.cox <- timing$NonParaCoxRegression(g.p2c2)
# Parametric Cox Regression
setwd(wd$data)
system.time(
# wb.cox <- timing$ParaCoxRegression(public.data, g.sum)
# saveRDS(wb.cox, "z_Para_Cox_Weibull5.rds")
wb.cox <- readRDS("z_Para_Cox_Weibull5.rds")
)
# create .csv output
setwd(wd$csv)
timing$CreateOutput(wb.cox, create.csv)
# Create Plots
if(FALSE){
if(create.eps){
setwd(wd$eps)
}
timing$PlotCoxWeibullSurvival(eps = create.eps,
para_in = wb.cox,
non_para_in = np.cox)
uni.CDF.timing <- timing$Weibull_Roseblatt(eps= create.eps,
data_LoLi = g.sum,
public.data = public.data,
Para_Cox_Weibull = wb.cox)
sun(uni.CDF.timing$BO, Ylim = c(0,2))
sun(uni.CDF.timing$VC, Ylim = c(0,2))
}
## 2) Multiple -------
par(par_default)
setwd(wd$code)
source("ExitDynamics_Multiple.R")
# Summary Statistics (How many observations, i.e. company IDs)
list(First_Entry_Date = min(G.p2c$Investment_Date),
BO_stochastic = nrow(multiple$creat_reg_df("BO", stochastic = TRUE)),
BO_first = nrow(multiple$creat_reg_df("BO", stochastic = FALSE)),
VC_stochastic = nrow(multiple$creat_reg_df("VC", stochastic = TRUE)),
VC_first = nrow(multiple$creat_reg_df("VC", stochastic = FALSE)) )
# Run Multiple Regressions
if(FALSE){
multi.reg <- list()
for(type in c("BO","VC")){
for(iter in c(1, 500)){
set.seed(99)
multi.reg[[paste(type, iter, sep="_")]] <- multiple$MLE(iter, type)
}
}
setwd(wd$data)
# saveRDS(multi.reg, "multi.reg2.RDS")
} else {
setwd(wd$data)
multi.reg <- readRDS("multi.reg2.RDS")
}
# NB2 Model
sapply(multi.reg$BO_500$NB2, sun)
sapply(multi.reg$VC_500$NB2, sun)
# Create .csv Output
setwd(wd$csv)
multi.reg.sum <- multiple$CreateOutput(multi.reg, create.csv)
# Plot color compound CDF
setwd(wd$eps)
set.seed(97)
multiple$predict_dgh(sim_out = TRUE, plot_it = TRUE, eps = create.eps)
if(FALSE){
# Plot dependent variables (Multiple)
setwd(wd$eps)
multiple$plot.multi.dist(create.eps)
system.time(
uni.CDF.multiple <- multiple$predict_dgh(sim_out = FALSE, plot_it = FALSE, eps = FALSE)
)
sun(uni.CDF.multiple, Ylim = c(0,2))
multiple$DGH_Roseblatt(G.p2c, uni.CDF.multiple)
plot.ecdf(uni.CDF.multiple)
abline(v = c(0,1), a = 0, b = 1, col = "grey", lty = 2)
points(seq(0,1,0.001), quantile(uni.CDF.multiple, seq(0,1,0.001)), col ="blue", pch = 20, cex = 0.7)
# curve(truncdist::dtrunc(x, spec="gamma" ,a=0.1 ,b=5 ,shape=1.304 , scale= exp(1.405)/1.304), 0,6)
}
mMMP_chart2 <- function(CEX = 1, meth = "reduced-form"){
mpp <- data.frame(Time = c(1.664, 6.404), CashFlow = c(-0.8, 1.3))
mpp3 <- data.frame(Time = c(3.323), CashFlow = c(-0.4))
mpp2 <- data.frame(Time = c(4.38, 8.3434), CashFlow = c(-1.2, 0.954))
smargin <- 0.5
if(create.eps){
old.wd <- getwd()
setwd(wd$eps)
setEPS() ; postscript("MPP-Visualization2.eps", width = 4.5, height = 2,
family = "Helvetica", pointsize = 2)
}
par(par_default)
par(mar = c(4.5,4.5,2,1), cex = CEX)
plot(mpp, type = "h", xlim = c(0, 10), ylim = c(-2, 2), ylab = "Cash Flow", xlab = "Time (in Quarters)",
cex.lab = 0.7, xaxs = "i", cex.axis = 0.8, at = seq(-10,10,1))
points(mpp, pch = 22, cex = 2, lwd = 1)
text(x = mpp$Time,y = c(smargin, -smargin), c(latex2exp::TeX('$\\c_1'),latex2exp::TeX('$\\d_1')), cex=1)
text(x = mpp$Time,y = mpp$CashFlow - c(smargin, -smargin), c(latex2exp::TeX('$\\C_1'),latex2exp::TeX('$\\D_1')), cex=1)
abline(h = 0, v = 0)
abline(v = seq(20), lty = 2, col= "darkgrey")
if(meth != "reduced-form"){
lines(mpp2, type = "h")
points(mpp2, pch = 21, cex = 2, lwd = 1)
text(x = mpp2$Time,y = c(smargin, -smargin), c(latex2exp::TeX('$\\c_3'),latex2exp::TeX('$\\d_3')), cex=1)
text(x = mpp2$Time,y = mpp2$CashFlow - c(smargin, -smargin), c(latex2exp::TeX('$\\C_3'),latex2exp::TeX('$\\D_3')), cex=1)
lines(mpp3, type = "h")
points(mpp3, pch = 25, cex = 2, lwd = 1)
text(x = mpp3$Time,y = smargin, c(latex2exp::TeX('$\\c_2')), cex=1)
text(x = mpp3$Time,y = mpp3$CashFlow - c(smargin), c(latex2exp::TeX('$\\C_2')), cex=1)
} else {
valueprocess <- data.frame(Time = 4.5, CashFlow = 0.9)
lines(valueprocess, type = "h", col = "red")
points(valueprocess, pch = 22, cex = 2, lwd = 1, col = "red")
text(x = valueprocess$Time,y = c(-smargin), c(latex2exp::TeX('$\\t')), cex = 1, col = "red")
text(x = valueprocess$Time,y = valueprocess$CashFlow + c(smargin), c(latex2exp::TeX('$\\V_1(t)')), cex = 1, col = "red")
}
if(create.eps){
dev.off()
setwd(old.wd)
}
}
mMMP_chart2()
create.eps <- TRUE
mMMP_chart2()
